# -*- coding: utf-8 -*-
"""Programación asincrónica

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EG3upMOyZtD0aDSvPxRcxdjeh8csbYKi
"""

#código ilustrativo
import asyncio

async def tarea_asincrona(nombre, segundos):
    print(f"[{nombre}] Iniciando tarea...")
    await asyncio.sleep(segundos)
    print(f"[{nombre}] Tarea completada después de {segundos} segundos")

async def main():
    print("Iniciando programa asíncrono...")
    await asyncio.gather(
        tarea_asincrona("Tarea 1", 2),
        tarea_asincrona("Tarea 2", 1),
        tarea_asincrona("Tarea 3", 3),
    )
    print("Todas las tareas han finalizado.")

# En Jupyter Notebook o Google Colab, simplemente usa await
await main()

#Ejemplo práctico
import asyncio
import nest_asyncio

# Aplicar nest_asyncio para permitir la ejecución de múltiples bucles de eventos
nest_asyncio.apply()

# Simulación de una descarga de archivo
async def descargar_archivo(nombre, tamaño):
    print(f"[{nombre}] Iniciando descarga de {tamaño}MB...")
    await asyncio.sleep(tamaño)  # Simula el tiempo de descarga
    print(f"[{nombre}] Descarga completada!")

# Función principal que ejecuta múltiples descargas
async def main():
    print("Bienvenido al simulador de descargas asíncronas!")

    # Lista de archivos para descargar (nombre, tamaño en MB)
    archivos = [
        ("Archivo1.zip", 3),
        ("Archivo2.iso", 5),
        ("Archivo3.pdf", 2),
    ]

    # Ejecutar descargas concurrentemente
    await asyncio.gather(*[descargar_archivo(nombre, tamaño) for nombre, tamaño in archivos])

    print("Todas las descargas han finalizado.")

# Ejecutar el programa
await main()